#pragma once

#ifndef DUSK_INPUT_KEYS_H
#define DUSK_INPUT_KEYS_H

#include <Collections/Map.h>
#include <Events/Event.h>
#include <GLFW/glfw3.h>

namespace Dusk
{

namespace Input
{

enum Key
{

INVALID_KEY = -1,

KEY_A = 65,
KEY_B,
KEY_C,
KEY_D,
KEY_E,
KEY_F,
KEY_G,
KEY_H,
KEY_I,
KEY_J,
KEY_K,
KEY_L,
KEY_M,
KEY_N,
KEY_O,
KEY_P,
KEY_Q,
KEY_R,
KEY_S,
KEY_T,
KEY_U,
KEY_V,
KEY_W,
KEY_X,
KEY_Y,
KEY_Z,

KEY_0,
KEY_EXCLAMATION = KEY_0,

KEY_1,
KEY_AT = KEY_1,

KEY_2,
KEY_HASHTAG = KEY_2,
KEY_POUND = KEY_HASHTAG,

KEY_3,
KEY_DOLLAR = KEY_3,

KEY_4,
KEY_PERCENT = KEY_4,

KEY_5,
KEY_CARROT = KEY_5,

KEY_6,
KEY_STAR = KEY_6,
KEY_ASTERISK = KEY_STAR,

KEY_7,
KEY_AMPERSAND = KEY_7,

KEY_8,
KEY_PARENTHESIS_OPEN = KEY_8,

KEY_9,
KEY_PARENTHESIS_CLOSE = KEY_9,

KEY_DASH,
KEY_MINUS = KEY_DASH,
KEY_UNDERSCORE = KEY_MINUS,

KEY_EQUAL,
KEY_PLUS = KEY_EQUAL,

KEY_ACCENT,
KEY_TILDE = KEY_ACCENT,

KEY_SQUARE_BRACKET_OPEN,
KEY_CURLY_BRACE_OPEN = KEY_SQUARE_BRACKET_OPEN,

KEY_SQUARE_BRACKET_CLOSE,
KEY_CURLY_BRACE_CLOSE = KEY_SQUARE_BRACKET_CLOSE,

KEY_SEMICOLON,
KEY_COLON = KEY_SEMICOLON,

KEY_QUOTE,
KEY_APOSTROPHE = KEY_QUOTE,
KEY_DOUBLE_QUOTE = KEY_QUOTE,

KEY_BACKSLASH,
KEY_PIPE = KEY_BACKSLASH,

KEY_PERIOD,
KEY_LESS_THAN = KEY_PERIOD,
KEY_ANGLE_BRACKET_OPEN = KEY_LESS_THAN,
KEY_CHEVRON_LEFT = KEY_LESS_THAN,

KEY_COMMA,
KEY_GREATER_THAN = KEY_COMMA,
KEY_ANGLE_BRACKET_CLOSE = KEY_GREATER_THAN,
KEY_CHEVRON_RIGHT = KEY_GREATER_THAN,

KEY_SLASH,
KEY_FORWARD_SLASH = KEY_SLASH,
KEY_QUESTION_MARK = KEY_SLASH,

KEY_UP,
KEY_DOWN,
KEY_LEFT,
KEY_RIGHT,

KEY_CAPS_LOCK,
KEY_SCROLL_LOCK,
KEY_NUM_LOCK,

KEY_BACKSPACE,
KEY_TAB,
KEY_ENTER,
KEY_SPACE,

KEY_PAUSE,
KEY_BREAK = KEY_PAUSE,

KEY_PRINT_SCREEN,
KEY_SYS_REQ = KEY_PRINT_SCREEN,

KEY_LEFT_SHIFT,
KEY_RIGHT_SHIFT,

KEY_LEFT_CTRL,
KEY_LEFT_CONTROL = KEY_LEFT_CTRL,

KEY_RIGHT_CTRL,
KEY_RIGHT_CONTROL = KEY_RIGHT_CTRL,

KEY_LEFT_ALT,
KEY_LEFT_ALTERNATE = KEY_LEFT_ALT,

KEY_RIGHT_ALT,
KEY_RIGHT_ALTERNATE = KEY_RIGHT_ALT,

KEY_INSERT,
KEY_DELETE,
KEY_HOME,
KEY_END,
KEY_PAGE_UP,
KEY_PAGE_DOWN,
KEY_MENU,

KEY_LEFT_SUPER,
KEY_LEFT_WINDOWS = KEY_LEFT_SUPER,

KEY_RIGHT_SUPER,
KEY_RIGHT_WINDOWS = KEY_RIGHT_SUPER,

KEY_PAD_0,
KEY_PAD_INSERT = KEY_PAD_0,

KEY_PAD_1,
KEY_PAD_END = KEY_PAD_1,

KEY_PAD_2,
KEY_PAD_DOWN = KEY_PAD_2,

KEY_PAD_3,
KEY_PAD_PAGE_DOWN = KEY_PAD_3,

KEY_PAD_4,
KEY_PAD_LEFT = KEY_PAD_4,

KEY_PAD_5,

KEY_PAD_6,
KEY_PAD_RIGHT = KEY_PAD_6,

KEY_PAD_7,
KEY_PAD_HOME = KEY_PAD_7,

KEY_PAD_8,
KEY_PAD_UP = KEY_PAD_8,

KEY_PAD_9,
KEY_PAD_PAGE_UP = KEY_PAD_9,

KEY_PAD_ADD,
KEY_PAD_SUBTRACT,
KEY_PAD_MULTIPLY,
KEY_PAD_DIVIDE,
KEY_PAD_ENTER,

KEY_PAD_DECIMAL,
KEY_PAD_DELETE = KEY_PAD_DECIMAL,

KEY_F1,
KEY_F2,
KEY_F3,
KEY_F4,
KEY_F5,
KEY_F6,
KEY_F7,
KEY_F8,
KEY_F9,
KEY_F10,
KEY_F11,
KEY_F12,

}; // enum Keys

void AddGLFWKeyMappings( Collections::Map<int, Key>& map );

class KeyEventData :
	public Events::EventData
{
public:

	KeyEventData( void ) :
		m_Key(Key::INVALID_KEY)
	{ }

	KeyEventData( const Key& key ) :
		m_Key(key)
	{ }

	virtual inline string GetClassName( void ) const { return "Key Event Data"; }

	virtual inline EventData* Clone(void) const { return New KeyEventData(m_Key); }

	inline Key GetKey( void ) const { return m_Key; }

private:

	Key		m_Key;

}; // class KeyEventData

} // namespace Input

} // namespace Dusk

#endif // DUSK_INPUT_KEYS_H